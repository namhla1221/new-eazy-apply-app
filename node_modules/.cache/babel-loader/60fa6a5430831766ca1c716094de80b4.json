{"ast":null,"code":"var _jsxFileName = \"/home/namhla/projects/New-Eazy-Apply/src/hooks/useAuth/useAuth.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, createContext, Context } from \"react\";\nimport { users } from \"../../api/users\";\nimport { useMount } from \"react-use\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst checkIfConfirm = async () => {\n  const {\n    hash\n  } = window.location;\n  if (!hash || !hash.startsWith(\"#/confirmation_token\")) return false;\n  const tokenValue = hash.replace(/#\\/confirmation_token=/, \"\");\n  const response = await users.signInWithToken(tokenValue);\n  return response;\n};\n\nconst checkIfRecover = async () => {\n  const {\n    hash\n  } = window.location;\n  if (!hash || !hash.startsWith(\"#/recovery_token\")) return false;\n  const tokenValue = hash.replace(/#\\/recovery_token=/, \"\");\n  const response = await users.signInWithRecovery(tokenValue);\n  return response;\n};\n\nconst useAuthInsideProvider = () => {\n  _s();\n\n  const [user, setUser] = useState(null);\n  useMount(async () => {\n    const confirm = await checkIfConfirm();\n    if (confirm) return setUser(confirm);\n    const recovery = await checkIfRecover();\n    if (recovery) return setUser(recovery);\n    const currentResponse = await users.getCurrent();\n    if (currentResponse) return setUser(currentResponse);\n    setUser(false);\n  });\n\n  const signIn = async (email, password) => {\n    const [success, payload] = await users.signIn(email, password);\n\n    if (success) {\n      setUser(payload);\n    }\n\n    return [success, payload];\n  };\n\n  const createAccount = async (email, password) => {\n    const [success, payload] = await users.createAccount(email, password);\n    return [success, payload];\n  };\n\n  const signOut = async () => {\n    const [success] = await users.signOut();\n\n    if (success) {\n      setUser(false);\n    }\n\n    return [success];\n  };\n\n  return {\n    loading: user === null,\n    user,\n    signIn,\n    createAccount,\n    signOut,\n    reset: users.resetPassword\n  };\n};\n/**\n * @typedef {object} auth\n * @property {boolean} loading\n * @property {null | false | { id: string }} user\n * @property {{email: string, password: string} => Promise<boolean, any>} signIn\n * @property {{email: string, password: string} => Promise<boolean, any>} createAccount\n * @property {() => Promise<boolean, any>} signOut\n * @property {() => Promise<boolean>} reset\n */\n\n/**\n * @type {Context<auth>}\n */\n\n\n_s(useAuthInsideProvider, \"ddw0VBjQN7kYTxuPYsEoIWGlaU8=\", false, function () {\n  return [useMount];\n});\n\nexport const context = /*#__PURE__*/createContext();\nexport const Provider = props => {\n  _s2();\n\n  const {\n    children\n  } = props;\n  const auth = useAuthInsideProvider();\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: auth,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(Provider, \"Mfp/C7PzVgzKUvAJaPS2oEPS3dg=\", false, function () {\n  return [useAuthInsideProvider];\n});\n\n_c = Provider;\nexport default context;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/home/namhla/projects/New-Eazy-Apply/src/hooks/useAuth/useAuth.js"],"names":["React","useState","createContext","Context","users","useMount","checkIfConfirm","hash","window","location","startsWith","tokenValue","replace","response","signInWithToken","checkIfRecover","signInWithRecovery","useAuthInsideProvider","user","setUser","confirm","recovery","currentResponse","getCurrent","signIn","email","password","success","payload","createAccount","signOut","loading","reset","resetPassword","context","Provider","props","children","auth"],"mappings":"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","sourcesContent":["import React, { useState, createContext, Context } from \"react\";\nimport { users } from \"../../api/users\";\nimport { useMount } from \"react-use\";\n\nconst checkIfConfirm = async () => {\n  const { hash } = window.location;\n  if (!hash || !hash.startsWith(\"#/confirmation_token\")) return false;\n  const tokenValue = hash.replace(/#\\/confirmation_token=/, \"\");\n  const response = await users.signInWithToken(tokenValue);\n  return response;\n};\n\nconst checkIfRecover = async () => {\n  const { hash } = window.location;\n  if (!hash || !hash.startsWith(\"#/recovery_token\")) return false;\n  const tokenValue = hash.replace(/#\\/recovery_token=/, \"\");\n  const response = await users.signInWithRecovery(tokenValue);\n  return response;\n}\n\n const useAuthInsideProvider = () => {\n  const [user, setUser] = useState(null);\n\n  useMount(async () => {\n    const confirm = await checkIfConfirm();\n    if (confirm) return setUser(confirm);\n\n    const recovery = await checkIfRecover();\n    if (recovery) return setUser(recovery);\n\n    const currentResponse = await users.getCurrent();\n    if (currentResponse) return setUser(currentResponse);\n\n    setUser(false);\n  });\n\n  const signIn = async (email, password) => {\n    const [success, payload] = await users.signIn(email, password);\n\n    if (success) {\n      setUser(payload);\n    }\n    return [success, payload];\n  };\n\n  const createAccount = async (email, password) => {\n    const [success, payload] = await users.createAccount(email, password);\n    return [success, payload];\n  };\n\n  const signOut = async () => {\n    const [success] = await users.signOut();\n    if (success) {\n      setUser(false);\n    }\n    return [success];\n  };\n\n  return {\n    loading: user === null,\n    user,\n    signIn,\n    createAccount,\n    signOut,\n    reset: users.resetPassword,\n  };\n};\n\n/**\n * @typedef {object} auth\n * @property {boolean} loading\n * @property {null | false | { id: string }} user\n * @property {{email: string, password: string} => Promise<boolean, any>} signIn\n * @property {{email: string, password: string} => Promise<boolean, any>} createAccount\n * @property {() => Promise<boolean, any>} signOut\n * @property {() => Promise<boolean>} reset\n */\n\n/**\n * @type {Context<auth>}\n */\n\nexport const context = createContext();\n\nexport const Provider = (props) => {\n  const { children } = props;\n  const auth = useAuthInsideProvider();\n\n  return <Context.Provider value={auth}>{children}</Context.Provider>;\n};\n\nexport default context;\n"]},"metadata":{},"sourceType":"module"}