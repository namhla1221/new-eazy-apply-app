{"ast":null,"code":"import GoTrue from \"gotrue-js\";\nimport { openDB } from \"idb\";\nconst auth = new GoTrue({\n  APIUrl: \"https://our-biz-app.netlify.app/.netlify/identity\",\n  audience: \"\",\n  setCookie: false\n});\n\nconst createUsersApi = () => {\n  const dbRequest = openDB(\"users\", 1, {\n    upgrade: innerDb => {\n      innerDb.createObjectStore(\"data\", {\n        keyPath: \"id\"\n      });\n      innerDb.createObjectStore(\"meta\", {\n        keyPath: \"id\"\n      });\n    }\n  });\n  /**\n   * @param {string} email\n   * @param {string} password\n   * @returns {Promise<[boolean, null | 'noAccount' | 'technical']>}\n   */\n\n  const signIn = async (email, password) => {\n    try {\n      const db = await dbRequest;\n      const {\n        id\n      } = await auth.login(email, password);\n      await db.put(\"meta\", {\n        id: \"current\",\n        value: id\n      });\n      await db.put(\"data\", {\n        id: id\n      });\n      return [true, null];\n    } catch (error) {\n      const errorAsString = error.toString();\n\n      if (errorAsString === \"JSONHTTPError: invalid_grant: No user found with that email, or password invalid.\") {\n        return [false, \"noAccount\"];\n      }\n\n      if (errorAsString === \"JSONHTTPError: invalid_grant: Email not confirmed\") {\n        return [false, \"notVerified\"];\n      }\n\n      return [false, \"technical\"];\n    }\n  };\n  /**\n   * @param {string} email\n   * @param {string} password\n   * @returns {Promise<[boolean, null | 'emailAreadyUsed' | 'technical']>}\n   */\n\n\n  const createAccount = async (email, password) => {\n    try {\n      const db = await dbRequest;\n      const {\n        id\n      } = await auth.signup(email, password);\n      await db.put(\"meta\", {\n        id: \"current\",\n        value: id\n      });\n      await db.put(\"data\", {\n        id: id\n      });\n      await signIn(email, password);\n      return [true, null];\n    } catch (error) {\n      const errorAsString = error.toString();\n\n      if (errorAsString === \"JSONHTTPError: A user with this email address has already been registered\") {\n        return [false, \"emailAreadyUsed\"];\n      }\n\n      return [false, \"technical\"];\n    }\n  };\n  /**\n   * @returns {Promise<null | { id: string }>}\n   */\n\n\n  const getCurrent = async () => {\n    const db = await dbRequest;\n    const current = await db.get(\"meta\", \"current\");\n    if (!current || !current.value) return null;\n    const response = await db.get(\"data\", current.value);\n    return response;\n  };\n  /**\n   * @returns {Promise<{ id: string}[]>}\n   */\n\n\n  const getUsers = async () => {\n    const db = await dbRequest;\n    return await db.getAll(\"data\");\n  };\n  /**\n   * @param {string} email\n   * @returns {[boolean]}\n   */\n\n\n  const resetPassword = async email => {\n    await auth.requestPasswordRecovery(email);\n    return [true];\n  };\n  /**\n   * @returns {Promise<[boolean, null | 'technical']>}\n   */\n\n\n  const signOut = async () => {\n    try {\n      const db = await dbRequest;\n      await db.put(\"meta\", {\n        id: \"current\",\n        value: null\n      });\n      return [true, null];\n    } catch (error) {\n      return [false, \"technical\"];\n    }\n  };\n  /**\n   * @param {string} token\n   * @returns {Promise<[boolean, null | 'technical']>}\n   */\n\n\n  const signInWithToken = async token => {\n    try {\n      const db = await dbRequest;\n      const {\n        id\n      } = await auth.confirm(token);\n      await db.put(\"meta\", {\n        id: \"current\",\n        value: id\n      });\n      await db.put(\"data\", {\n        id: id\n      });\n      return [true, null];\n    } catch (error) {\n      return [false, \"technical\"];\n    }\n  };\n\n  const signInWithRecovery = async token => {\n    try {\n      const db = await dbRequest;\n      const {\n        id\n      } = await auth.recoverToken(token);\n      await db.put(\"meta\", {\n        id: \"current\",\n        value: id\n      });\n      await db.put(\"data\", {\n        id: id\n      });\n      return [true, null];\n    } catch (error) {\n      return [false, \"technical\"];\n    }\n  };\n\n  return {\n    getCurrent,\n    getUsers,\n    signOut,\n    createAccount,\n    signInWithToken,\n    signIn,\n    resetPassword,\n    signInWithRecovery\n  };\n};\n\nexport const users = createUsersApi();\nexport default users;","map":{"version":3,"sources":["/home/namhla/projects/New-Eazy-Apply/src/api/users/users.js"],"names":["GoTrue","openDB","auth","APIUrl","audience","setCookie","createUsersApi","dbRequest","upgrade","innerDb","createObjectStore","keyPath","signIn","email","password","db","id","login","put","value","error","errorAsString","toString","createAccount","signup","getCurrent","current","get","response","getUsers","getAll","resetPassword","requestPasswordRecovery","signOut","signInWithToken","token","confirm","signInWithRecovery","recoverToken","users"],"mappings":"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","sourcesContent":["import GoTrue from \"gotrue-js\";\nimport { openDB } from \"idb\";\n\nconst auth = new GoTrue({\n  APIUrl: \"https://our-biz-app.netlify.app/.netlify/identity\",\n  audience: \"\",\n  setCookie: false,\n});\n\nconst createUsersApi = () => {\n  const dbRequest = openDB(\"users\", 1, {\n    upgrade: (innerDb) => {\n      innerDb.createObjectStore(\"data\", { keyPath: \"id\" });\n      innerDb.createObjectStore(\"meta\", { keyPath: \"id\" });\n    },\n  });\n\n  /**\n   * @param {string} email\n   * @param {string} password\n   * @returns {Promise<[boolean, null | 'noAccount' | 'technical']>}\n   */\n\n  const signIn = async (email, password) => {\n    try {\n      const db = await dbRequest;\n      const { id } = await auth.login(email, password);\n\n      await db.put(\"meta\", { id: \"current\", value: id });\n      await db.put(\"data\", { id: id });\n\n      return [true, null];\n    } catch (error) {\n      const errorAsString = error.toString();\n\n      if (\n        errorAsString ===\n        \"JSONHTTPError: invalid_grant: No user found with that email, or password invalid.\"\n      ) {\n        return [false, \"noAccount\"];\n      }\n      if (\n        errorAsString === \"JSONHTTPError: invalid_grant: Email not confirmed\"\n      ) {\n        return [false, \"notVerified\"];\n      }\n      return [false, \"technical\"];\n    }\n  };\n\n  /**\n   * @param {string} email\n   * @param {string} password\n   * @returns {Promise<[boolean, null | 'emailAreadyUsed' | 'technical']>}\n   */\n\n  const createAccount = async (email, password) => {\n    try {\n      const db = await dbRequest;\n      const { id } = await auth.signup(email, password);\n\n      await db.put(\"meta\", { id: \"current\", value: id });\n      await db.put(\"data\", { id: id });\n\n      await signIn(email, password);\n      return [true, null];\n    } catch (error) {\n      const errorAsString = error.toString();\n      if (\n        errorAsString ===\n        \"JSONHTTPError: A user with this email address has already been registered\"\n      ) {\n        return [false, \"emailAreadyUsed\"];\n      }\n      return [false, \"technical\"];\n    }\n  };\n\n  /**\n   * @returns {Promise<null | { id: string }>}\n   */\n  const getCurrent = async () => {\n    const db = await dbRequest;\n\n    const current = await db.get(\"meta\", \"current\");\n    if (!current || !current.value) return null;\n\n    const response = await db.get(\"data\", current.value);\n    return response;\n  };\n\n  /**\n   * @returns {Promise<{ id: string}[]>}\n   */\n\n  const getUsers = async () => {\n    const db = await dbRequest;\n    return await db.getAll(\"data\");\n  };\n\n  /**\n   * @param {string} email\n   * @returns {[boolean]}\n   */\n  const resetPassword = async (email) => {\n    await auth.requestPasswordRecovery(email);\n    return [true];\n  };\n\n  /**\n   * @returns {Promise<[boolean, null | 'technical']>}\n   */\n  const signOut = async () => {\n    try {\n      const db = await dbRequest;\n      await db.put(\"meta\", { id: \"current\", value: null });\n      return [true, null];\n    } catch (error) {\n      return [false, \"technical\"];\n    }\n  };\n\n  /**\n   * @param {string} token\n   * @returns {Promise<[boolean, null | 'technical']>}\n   */\n  const signInWithToken = async (token) => {\n    try {\n      const db = await dbRequest;\n      const { id } = await auth.confirm(token);\n\n      await db.put(\"meta\", { id: \"current\", value: id });\n      await db.put(\"data\", { id: id });\n\n      return [true, null];\n    } catch (error) {\n      return [false, \"technical\"];\n    }\n  };\n\n  const signInWithRecovery = async (token) => {\n    try {\n      const db = await dbRequest;\n      const { id } = await auth.recoverToken(token);\n\n      await db.put(\"meta\", { id: \"current\", value: id });\n      await db.put(\"data\", { id: id });\n\n      return [true, null];\n    } catch (error) {\n      return [false, \"technical\"];\n    }\n  };\n\n  return {\n    getCurrent,\n    getUsers,\n    signOut,\n    createAccount,\n    signInWithToken,\n    signIn,\n    resetPassword,\n    signInWithRecovery,\n  };\n};\n\nexport const users = createUsersApi();\nexport default users;\n"]},"metadata":{},"sourceType":"module"}